################################################################################
# Import modules
#-------------------------------------------------------------------------------
import numpy as np
import numpy.ma as ma
from astropy.table import Table, QTable
import csv


import time


# Import functions from other .py files
from Velocity_Map_Functions import find_phi

from RC_2D_Fit_Functions import Galaxy_Data, \
                                Galaxy_Fitting_iso,\
                                Galaxy_Fitting_NFW, \
                                Galaxy_Fitting_bur, \
                                Hessian_Calculation_Isothermal,\
                                Hessian_Calculation_NFW,\
                                Hessian_Calculation_Burket,\
                                Plotting_Isothermal,\
                                Plotting_NFW,\
                                Plotting_Burkert,\
                                getTidal,\
                                deproject_spaxel,\
                                plot_rot_curve,\
                                plot_diagnostic_panel,\
                                run_MCMC

from Velocity_Map_Functions_cython import rot_incl_iso,\
                                          rot_incl_NFW, \
                                          rot_incl_bur

from mapSmoothness_functions import how_smooth

from os import path

import matplotlib.pyplot as plt
################################################################################




################################################################################
# Physics Constants
#-------------------------------------------------------------------------------
c = 3E5 # km * s ^1
h = 1 # reduced hubble constant
H_0 =  100 * h # km * s^-1 * Mpc^-1
q0 = 0.2 # minimum inclination value
################################################################################

################################################################################
# Used files (local)
#-------------------------------------------------------------------------------
'''
MANGA_FOLDER = '/Users/richardzhang/Documents/UR_Stuff/Research_UR/SDSS/dr16/manga/spectro/'

DRP_FILENAME = MANGA_FOLDER + 'redux/v3_1_1/drpall-v3_1_1.fits'

# Can't really use this anymore
VEL_MAP_FOLDER = MANGA_FOLDER + 'analysis//v3_1_1/2.1.1/HYB10-GAU-MILESHC/'

MORPH_FOLDER = '/Users/richardzhang/Documents/UR_Stuff/Research_UR/SDSS/dr16/manga/morph/'
'''
################################################################################

################################################################################
# Used files (bluehive)
#-------------------------------------------------------------------------------
MANGA_FOLDER_yifan = '/home/yzh250/Documents/UR_Stuff/Research_UR/SDSS/dr17/manga/spectro/'

DRP_FILENAME = MANGA_FOLDER_yifan + 'redux/v3_1_1/drpall-v3_1_1.fits'

VEL_MAP_FOLDER = '/scratch/kdougla7/data/SDSS/dr17/manga/spectro/analysis/v3_1_1/3.1.0/HYB10-MILESHC-MASTARSSP/'

MORPH_FOLDER = '/home/yzh250/Documents/UR_Stuff/Research_UR/SDSS/dr17/manga/morph/'

SMOOTHNESS_MORPH_FOLDER = '/home/yzh250/Documents/UR_Stuff/Research_UR/RotationCurve/2D_RC/main/'

smoothness_morph_file = SMOOTHNESS_MORPH_FOLDER + 'cross_table.csv'
################################################################################


DTable =  Table.read(DRP_FILENAME, format='fits')

#MTable =  Table.read(MORPH_file, format='fits')

DRP_index = {}

for i in range(len(DTable)):
    gal_ID = DTable['plateifu'][i]

    DRP_index[gal_ID] = i

# DL morph catalog
cross_match_table = Table.read(smoothness_morph_file,format='ascii.commented_header')
gal_ID_cross = cross_match_table['galaxy_ID'].data
ttype = cross_match_table['DL_ttype'].data
################################################################################





################################################################################
# Get the Mass of stars & redshifts & angular resolution of r50
#-------------------------------------------------------------------------------
m = DTable['nsa_elpetro_mass']
rat = DTable['nsa_elpetro_ba']
phi = DTable['nsa_elpetro_phi']
z = DTable['nsa_z']
r50_ang = DTable['nsa_elpetro_th50_r']
################################################################################

################################################################################
# Obtaining information for MaNGA galaxies with smoothness smaller than 2
#-------------------------------------------------------------------------------
galaxy_ID = ['10001-3704','7815-1901','7957-12703','7958-3703','7958-6103','7962-3704','7964-6104','7964-9102','7968-9101',\
 '7972-6101','7975-3704','7977-3701','7977-3702','7990-1901','7990-1902','7990-3701','7991-1901','7991-1902','7991-3702','8077-3701',\
 '8077-3704','8077-6101','8078-12702','8078-1902','8080-3702','8080-6104','8081-6104','8082-1901','8082-3704','8083-3704','8084-1902',\
 '8086-12705','8086-1901','8086-6103','8086-9101','8131-3701','8132-1901','8132-1902','8133-12704','8133-3702','8133-6101','8133-9102',\
 '8135-1901','8137-12701','8137-1902','8137-3703','8137-6104','8138-3704','8139-3704','8139-9102','8140-12702','8140-3702','8141-6102',\
 '8141-6103','8143-1901','8144-3702','8145-12703','8146-12703','8146-3701','8146-3702','8147-1901','8147-1902','8149-12704','8149-1901',\
 '8149-3701','8150-3702','8150-6104','8153-3702','8154-3703','8155-3702','8155-3703','8156-12705','8158-12702','8158-1902','8158-3701',\
 '8158-3702','8158-3704','8158-6102','8243-6102','8247-1901','8247-3703','8247-6103','8249-9101','8250-1902','8250-3703','8250-9102',\
 '8252-12701','8252-3704','8253-12702','8253-12705','8253-1901','8253-9101','8254-12702','8254-12705','8255-12703','8256-12705',\
 '8256-3704','8257-3701','8258-6102','8258-9102','8259-1901','8261-1901','8262-12702','8262-3703','8263-6103','8274-3704','8311-1901',\
 '8311-3701','8311-9101','8313-3703','8315-9101','8317-12703','8317-1902','8318-1901','8318-1902','8318-3703','8318-6103','8320-1901',\
 '8323-1901','8323-3703','8323-3704','8325-3704','8329-1902','8329-3701','8330-1901','8330-3702','8332-12705','8332-3701','8332-3704',\
 '8332-6104','8338-1902','8439-1901','8439-1902','8440-3701','8440-3704','8443-3701','8444-9101','8445-1902','8446-1901','8446-3701',\
 '8447-1902','8447-3703','8449-6103','8449-6104','8451-3704','8452-3703','8454-12705','8454-3701','8455-12702','8456-1902','8456-3701',\
 '8458-6104','8461-9102','8464-1902','8465-1902','8481-6101','8481-6102','8482-3702','8482-3703','8483-1901','8483-3701','8483-3703',\
 '8485-12703','8485-3701','8486-3704','8486-6104','8547-12703','8547-3703','8548-3701','8549-12701','8551-1901','8551-3704','8554-1902',\
 '8555-6102','8566-9101','8567-1901','8567-3702','8567-3704','8567-6103','8568-1901','8588-1902','8588-3702','8588-3704','8591-6101',\
 '8597-1902','8600-1902','8601-6104','8602-12702','8603-6101','8604-6102','8604-6103','8606-3702','8606-3703','8611-3701','8611-3702',\
 '8611-6101','8612-1902','8612-6101','8612-9102','8613-1902','8613-3701','8613-6104','8615-1902','8615-6104','8618-3704','8618-6102',\
 '8623-12701','8623-12703','8623-12705','8623-3702','8624-6102','8625-1901','8626-6102','8655-1901','8712-1901','8714-1902','8714-3704',\
 '8714-6104','8715-3703','8715-6101','8716-1902','8718-1901','8719-1902','8720-3701','8720-3702','8720-3703','8720-6101','8721-3703',\
 '8727-1901','8727-3701','8728-9101','8931-9101','8933-12701','8935-3703','8936-9102','8937-1901','8937-1902','8937-6103','8938-3702',\
 '8939-3701','8941-3704','8942-3701','8944-1902','8945-1901','8945-3703','8945-9102','8946-1901','8947-1902','8948-3702','8948-3704',\
 '8948-6103','8950-9101','8977-1901','8977-6101','8977-6104','8978-1901','8978-9102','8979-12705','8979-3703','8980-1901','8980-1902',\
 '8982-3704','8984-1902','8987-9102','8991-3701','8991-6103','8992-12701','8992-3701','8992-3704','8993-3703','8993-6103','8993-6104',\
 '8995-1901','8995-3703','8996-3701','8996-3704','8997-12703','8997-1902','8997-3702','8999-6104','9000-1902','9002-12701','9002-3702',\
 '9002-3704','9025-3704','9025-6101','9026-3702','9027-1901','9027-1902','9027-6101','9028-3702','9029-1902','9029-6104','9031-12702',\
 '9031-3703','9031-3704','9034-6103','9035-12702','9035-1901','9036-3703','9036-9102','9037-1902','9037-3702','9037-6103','9037-6104',\
 '9037-9101','9038-12702','9039-1902','9043-3702','9044-12704','9045-1901','9045-1902','9045-3704','9047-6101','9047-9101','9048-1902',\
 '9048-6101','9048-6103','9048-9101','9050-6104','9085-1901','9088-6104','9095-1902','9182-6101','9183-12703','9183-12705','9183-3704',\
 '9184-12704','9184-1901','9184-3701','9184-6101','9184-6103','9185-1901','9185-3702','9193-12703','9193-1902','9194-3704','9194-9101',\
 '9196-1901','9196-3702','9196-9102','9485-12701','9485-6101','9486-3701','9487-3702','9490-1901','9490-3701','9491-12702','9491-3703',\
 '9491-3704','9492-3702','9492-3703','9494-6102','9494-6104','9497-12705','9500-3703','9500-6104','9502-6103','9505-12702','9505-12703',\
 '9505-6103','9507-3701','9508-1902','9508-6103','9509-1902','9509-3704','9512-3702','9512-3703','9863-6101','9864-9102','9865-12704',\
 '9865-3704','9868-12702','9868-3704','9870-1901','9870-1902','9870-3701','9870-6101','9876-3701','9881-1902','9881-6103','9881-6104',\
 '9883-12701','9888-1902','9891-12703','9891-1901','9891-6101']
#-------------------------------------------------------------------------------

for i in range(len(galaxy_ID)):

    plate, IFU = galaxy_ID[i].split('-')

    # bluehive
    data_file = VEL_MAP_FOLDER + plate + '/' + IFU + '/manga-' + galaxy_ID[i] + '-MAPS-HYB10-MILESHC-MASTARSSP.fits.gz'
    # local
    #data_file = VEL_MAP_FOLDER + plate + '/' + IFU + '/manga-' + galaxy_ID[i] + '-MAPS-HYB10-GAU-MILESHC.fits.gz'

    j = DRP_index[galaxy_ID[i]]

    redshift = z[j]
    velocity =  redshift* c
    distance = (velocity / H_0) * 1000 #kpc
    scale = 0.5 * distance / 206265

    #c_scale['scale'][i] = scale

    #incl = np.arccos(rat[j])
    cosi2 = (rat[j]**2 - q0**2)/(1 - q0**2)
    if cosi2 < 0:
        cosi2 = 0

    incl = np.arccos(np.sqrt(cosi2))

    #ph = phi[j] * np.pi / 180

    if path.exists(data_file) and (incl > 0):
        ########################################################################
        # Get data
        #-----------------------------------------------------------------------
        # scale, incl, ph, rband, Ha_vel, Ha_vel_ivar, Ha_vel_mask, vmasked, gshape, x_center_guess, y_center_guess = Galaxy_Data(galaxy_ID)
        data_maps, gshape = Galaxy_Data(galaxy_ID[i],VEL_MAP_FOLDER)
        #-----------------------------------------------------------------------


        ########################################################################
        # Selection
        #-----------------------------------------------------------------------
        # Morphological cut
        #tidal = getTidal(galaxy_ID[i], MORPH_FOLDER)
        tidal = getTidal(galaxy_ID[i], MORPH_FOLDER)

        Ttype = 0
        if galaxy_ID[i] == gal_ID_cross[i]:
            Ttype = ttype[i]

        # Smoothness cut
        max_map_smoothness = 2

        map_smoothness = how_smooth(data_maps['Ha_vel'], data_maps['Ha_vel_mask'])

        SN_map = data_maps['Ha_flux'] * np.sqrt(data_maps['Ha_flux_ivar'])
        Ha_vel_mask = data_maps['Ha_vel_mask'] + (SN_map < 5)

        vmasked = ma.array(data_maps['Ha_vel'], mask = Ha_vel_mask)
        ivar_masked = ma.array(data_maps['Ha_vel_ivar'], mask = Ha_vel_mask)

        r_band_masked = ma.array(data_maps['r_band'],mask=Ha_vel_mask)

        plt.imshow(vmasked,cmap='RdBu_r',origin='lower')
        plt.title(galaxy_ID[i]+'_sm2_t0')
        plt.savefig(galaxy_ID[i]+'_sm2_t0.png',format='png')
        plt.close()
